import asyncio
import logging
import os
import base64
from io import BytesIO
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from groq import Groq
from PIL import Image

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_TOKEN = os.getenv('BOT_TOKEN')
GROQ_API_KEY = os.getenv('GROQ_API_KEY')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
if not TELEGRAM_TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'BOT_TOKEN' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    exit(1)
if not GROQ_API_KEY:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'GROQ_API_KEY' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    exit(1)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Groq ---
client = Groq(api_key=GROQ_API_KEY)

# --- –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã ---
CALORIE_PROMPT = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

üìã **–û–ø—Ä–µ–¥–µ–ª–∏ –±–ª—é–¥–∞**: –ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ

üìè **–û—Ü–µ–Ω–∫–∞ –ø–æ—Ä—Ü–∏–π**: –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–π

üìä **–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë–ñ–£**:
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: [—á–∏—Å–ª–æ] –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: [—á–∏—Å–ª–æ] –≥
‚Ä¢ –ñ–∏—Ä—ã: [—á–∏—Å–ª–æ] –≥
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: [—á–∏—Å–ª–æ] –≥

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ö—Ä–∞—Ç–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏

–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –≤ –æ—Ü–µ–Ω–∫–µ."""


@dp.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –±–∞–∑–µ Groq AI (‚ö° —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π!).\n\n"
        "üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã, –∏ —è –æ—Ü–µ–Ω—é:\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π\n"
        "‚Ä¢ –ë–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã\n"
        "‚Ä¢ –ü–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üöÄ"
    )


@dp.message(F.photo)
async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("‚ö° –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é Groq AI...")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        photo = message.photo[-1]  # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        file = await bot.get_file(photo.file_id)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_bytes_io = await bot.download_file(file.file_path)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è Groq API
        image_data = file_bytes_io.read()
        base64_image = base64.b64encode(image_data).decode('utf-8')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_media_type = "image/jpeg"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            img = Image.open(BytesIO(image_data))
            if img.format == "PNG":
                image_media_type = "image/png"
            elif img.format == "WEBP":
                image_media_type = "image/webp"
            elif img.format == "JPEG" or img.format == "JPG":
                image_media_type = "image/jpeg"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ Groq (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Å vision)
        completion = client.chat.completions.create(
            model="llama-3.2-11b-vision-preview",  # –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": CALORIE_PROMPT
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:{image_media_type};base64,{base64_image}"
                            }
                        }
                    ]
                }
            ],
            temperature=0.7,
            max_tokens=1024,
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        if completion.choices and len(completion.choices) > 0:
            answer_text = completion.choices[0].message.content
            await message.answer(f"ü§ñ *–ê–Ω–∞–ª–∏–∑ –æ—Ç Groq AI:*\n\n{answer_text}", parse_mode="Markdown")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Groq AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        
        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = str(e)
        if "rate_limit" in error_message.lower():
            await message.answer("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        elif "invalid" in error_message.lower():
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ–¥–∞ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞"
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –°–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ–¥–∞ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏"
            )


@dp.message(F.text)
async def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏!\n\n"
        "–Ø –Ω–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç - —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    )


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –Ω–∞ Groq AI –∑–∞–ø—É—â–µ–Ω! ‚ö°")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())
